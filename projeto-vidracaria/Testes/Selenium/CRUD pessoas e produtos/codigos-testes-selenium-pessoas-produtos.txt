//Testes Selenium\\
//João Pedro Josué\\

//CT1 Pessoas - Sem campos nulos\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT1 Pessoas - Sem campos nulos', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/pessoas');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Pessoas'])[1]/following::mat-icon[1]")).click();
		await element(by.id("mat-input-12")).sendKeys('João Pedro');
		await element(by.id("mat-input-13")).sendKeys('(35) 9 9124-7925');
		await element(by.id("mat-input-14")).click();
		await element(by.id("mat-input-14")).sendKeys('Rua teste');
		await element(by.xpath("//div[@id='mat-select-value-5']/span")).click();
		await element(by.xpath("//mat-option[@id='mat-option-4']/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-2']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Usuário João Pedro cadastrado(a) com sucesso!'])[1]/following::button[1]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT2 Pessoas - Nome nulo\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT2 Pessoas - Nome nulo', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/pessoas');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Pessoas'])[1]/following::button[1]")).click();
		await element(by.id("mat-input-9")).click();
		await element(by.id("mat-input-9")).sendKeys('(35) 9 9124-7925');
		await element(by.id("mat-input-10")).sendKeys('Rua teste');
		await element(by.xpath("//div[@id='mat-select-value-3']/span")).click();
		await element(by.xpath("//mat-option[@id='mat-option-3']/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await browser.actions().doubleClick(element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div[2]/button/span")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Produtos'])[1]/following::div[5]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT3 Pessoas - Contato nulo\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT3 Pessoas - Contato nulo', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/pessoas');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Pessoas'])[1]/following::span[1]")).click();
		await element(by.id("mat-input-6")).sendKeys('João Pedro');
		await element(by.id("mat-input-8")).sendKeys('Rua teste');
		await element(by.xpath("//div[@id='mat-select-value-3']/span")).click();
		await element(by.xpath("//mat-option[@id='mat-option-2']/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await browser.actions().doubleClick(element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await browser.actions().doubleClick(element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await browser.actions().doubleClick(element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await browser.actions().doubleClick(element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT4 Pessoas - Endereço nulo\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT4 Pessoas - Endereço nulo', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/pessoas');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Pessoas'])[1]/following::button[1]")).click();
		await element(by.id("mat-input-6")).sendKeys('João Pedro');
		await element(by.id("mat-input-7")).sendKeys('(35) 9 9124-7925');
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[4]/mat-form-field/div/div/div")).click();
		await element(by.xpath("//mat-option[@id='mat-option-2']/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await browser.actions().doubleClick(element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT5 Pessoas - Tipo nulo\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT5 Pessoas - Tipo nulo', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/pessoas');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Pessoas'])[1]/following::button[1]")).click();
		await element(by.id("mat-input-6")).sendKeys('João Pedro');
		await element(by.id("mat-input-7")).sendKeys('(35) 9 9124-7925');
		await element(by.id("mat-input-8")).click();
		await element(by.id("mat-input-8")).sendKeys('Rua teste');
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[4]/mat-form-field/div/div/div")).click();
		await element(by.xpath("//body/div/div[3]")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT6 Pessoas - Contato com caracteres não númericos\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT6 Pessoas - Contato com caracteres não númericos', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/pessoas');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Pessoas'])[1]/following::button[1]")).click();
		await element(by.id("mat-input-9")).sendKeys('João Pedro');
		await element(by.id("mat-input-10")).sendKeys('(35) 9 91__-____');
		await element(by.id("mat-input-11")).sendKeys('Jo');
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-2']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[4]/mat-form-field/div/div/div")).click();
		await element(by.xpath("//mat-option[@id='mat-option-4']/span")).click();
		await element(by.id("mat-input-10")).click();
		await element(by.id("mat-input-10")).sendKeys('(35) 9 9178-7866');
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-2']/app-modal-criar-pessoa/body/div/div/mat-card/form/div[5]/div/button/span")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Usuário João Pedro cadastrado(a) com sucesso!'])[1]/following::button[1]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT7 Pessoas - Visualizar pessoas\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT7 Pessoas - Visualizar pessoas', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/pessoas');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Cliente'])[1]/following::mat-icon[1]")).click();
		await element(by.xpath("//body/div/div")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT8 Pessoas - Excluir pessoa\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT8 Pessoas - Excluir pessoa', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/pessoas');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Cliente'])[2]/following::mat-icon[2]")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Não'])[1]/following::button[1]")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='João Pedro Deletado(a) com sucesso!'])[1]/following::button[1]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT9 Produtos - Sem campos nulos\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT9 Produtos - Sem campos nulos', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Produtos'])[1]/following::mat-icon[1]")).click();
		await element(by.id("mat-input-1")).sendKeys('Box banheiro');
		await element(by.id("mat-input-2")).sendKeys('Box banheiro');
		await element(by.id("mat-input-3")).click();
		await element(by.id("mat-input-3")).sendKeys('1');
		await element(by.id("mat-input-3")).click();
		await element(by.id("mat-input-3")).sendKeys('2');
		await element(by.id("mat-input-3")).click();
		await browser.actions().doubleClick(element(by.id("mat-input-3"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-0']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]/button/span/mat-label")).click();
		await element(by.xpath("//input[@type='file']")).sendKeys('C:\Users\joaoj\OneDrive\Documentos\1- SIN\Sin Semestre 7\Dev\vidracaria\Entregaveis 2\Testes Selenium\box banheiro.jpg');
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-0']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[6]/div/button/span")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Box banheiro cadastrado com sucesso!'])[1]/following::button[1]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT10 Produtos - Nome nulo\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT10 Produtos - Nome nulo', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Produtos'])[1]/following::mat-icon[1]")).click();
		await element(by.id("mat-input-7")).sendKeys('Teste');
		await element(by.id("mat-input-8")).sendKeys('1');
		await element(by.id("mat-input-8")).click();
		await element(by.id("mat-input-8")).sendKeys('2');
		await browser.actions().doubleClick(element(by.id("mat-input-8"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT11 Produtos - Descrição nulo\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT11 Produtos - Descrição nulo', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Produtos'])[1]/following::mat-icon[1]")).click();
		await element(by.id("mat-input-4")).sendKeys('Teste');
		await element(by.id("mat-input-6")).sendKeys('1');
		await element(by.id("mat-input-6")).click();
		await element(by.id("mat-input-6")).sendKeys('2');
		await element(by.id("mat-input-6")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
		await browser.actions().doubleClick(element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
		await browser.actions().doubleClick(element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT12 Produtos - Quantidade nulo\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT12 Produtos - Quantidade nulo', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Produtos'])[1]/following::mat-icon[1]")).click();
		await element(by.id("mat-input-4")).sendKeys('Teste');
		await element(by.id("mat-input-5")).sendKeys('Teste');
		await element(by.id("mat-input-6")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[2]/mat-form-field/div")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[6]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[6]/div/button/span")).click();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[6]/div/button/span")).click();
		await browser.actions().doubleClick(element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[6]/div/button/span"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[6]/div/button/span")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT13 Produtos - Imagem nulo\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT13 Produtos - Imagem nulo', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Produtos'])[1]/following::mat-icon[1]")).click();
		await element(by.id("mat-input-4")).sendKeys('Teste');
		await element(by.id("mat-input-5")).sendKeys('Teste');
		await element(by.id("mat-input-6")).sendKeys('1');
		await element(by.id("mat-input-6")).click();
		await element(by.id("mat-input-6")).sendKeys('2');
		await browser.actions().doubleClick(element(by.id("mat-input-6"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-1']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT14 Produtos - Quantidade negativa\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT14 Produtos - Quantidade negativa', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Listagem de Produtos'])[1]/following::button[1]")).click();
		await element(by.id("mat-input-1")).sendKeys('Teste');
		await element(by.id("mat-input-2")).sendKeys('Teste');
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-0']/app-modal-cadastra-produto/body/div/div/mat-card")).click();
		await element(by.id("mat-input-3")).sendKeys('1');
		await element(by.id("mat-input-3")).click();
		await element(by.id("mat-input-3")).sendKeys('2');
		await element(by.id("mat-input-3")).click();
		await browser.actions().doubleClick(element(by.id("mat-input-3"))).perform();
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-0']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[3]/mat-form-field/div/div/div")).click();
		await element(by.id("mat-input-3")).click();
		await browser.actions().doubleClick(element(by.id("mat-input-3"))).perform();
		await element(by.id("mat-input-3")).sendKeys('-5');
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-0']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[4]/button/span/mat-label")).click();
		await element(by.xpath("//input[@type='file']")).sendKeys('C:\fakepath\box banheiro.jpg');
		await element(by.xpath("//mat-dialog-container[@id='mat-dialog-0']/app-modal-cadastra-produto/body/div/div/mat-card/form/div[6]/div/button/span")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='undefined'])[1]/following::button[1]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT15 Produtos - Visualizar produtos\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT15 Produtos - Visualizar produtos', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/');
		await element(by.xpath("//mat-card[3]/div/img")).click();
		await element(by.xpath("//div[2]/div")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Pessoas'])[1]/following::mat-card[1]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});


//CT16 Produtos - Excluir produto\\
import { browser, by, element, Key, logging, ExpectedConditions as EC } from 'protractor';

describe('CT16 Produtos - Excluir produto', () => {

	beforeAll(async () => { });
	beforeEach(async () => { });

	it('should do something', async () => {
		await browser.get('http://localhost:4200/');
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='teste'])[2]/following::mat-icon[1]")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='Não'])[1]/following::button[1]")).click();
		await element(by.xpath("(.//*[normalize-space(text()) and normalize-space(.)='teste Deletado com sucesso!'])[1]/following::button[1]")).click();
	});

	afterEach(async () => {
		// Assert that there are no errors emitted from the browser
		const logs = await browser.manage().logs().get(logging.Type.BROWSER);
		expect(logs).not.toContain(jasmine.objectContaining({
			level: logging.Level.SEVERE,
		} as logging.Entry));
	});

});